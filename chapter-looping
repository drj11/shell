Loops

Looping, repetition, iteration.  Shell has 'for' loops that
iterate over a finite list, and 'while' loops that are
indefinite: a condition determines when, if ever, the loop
terminates.  There are also 'until' loops (just like 'while' but
with the condition inverted), but they seem to have been
relegated to the backwaters of shell.  I'll also show looping
with functions, and implicit looping that certain utilites perform
such as 'find' and 'printf'.

section while

A 'while' loop looks like this:
CODE
while condition
do
    stuff
done
/CODE

The loop executes in cycles where in each cycle 'condition' is
executed and if the condition is true then the commands 'stuff'
are executed.  If the condition is false then the loop
terminates.  This basic looping structure can modified by the
utilities 'break', which causes the loop to terminate whenever
it is run, and 'continue' which terminates the current cycle and
start a new cycle immediately (beginning with the test of
'condition').

The condition is just like in 'if' which we saw earlier.  It is
a command whose exit status is tested, and just like 'if' the
same true/false convention is used.  An exit status of 0 is true
and will cause the while loop to continue; an exit status of
non-zero is false and will terminate the while loop.

An 'until' loop is just like a 'while' loop except that the
sense of the condition is inverted.  The loop will repeat as
long as 'condition' is false, and terminate when 'condition' is
true.  They are rare in the wild.

Of course the condition commands are typically the same ones we
would use in an 'if'.

A classic use of 'while' is old-school option processing.

CODE
e=''
while [ $# -gt 0 ]
do
    case $1 in
        (--) shift; break;;
        (-e) e='!'; shift;;
        (-?) echo 1>&2 'invalid option'; exit 2;;
        (*) break;;
    esac
done
printf 'Hello %s%s\n' "$1" "$e"
/CODE

This loop has several exit conditions.  If there are no more
positional parameters then '$#' will be 0 and the condition
'[ $# -gt 0 ]' will fail; if the positional parameter '--' is supplied
then this indicates the end of option processing, and the remaining
positional parameters will be treated as arguments; if '-' followed
by some unknown option appears, then the program will exit with
a non-zero exit status (note, not just the loop is terminated
but the entire program); if there is any other sort of positional
parameter then that must be the end of option processing and the start
of the arguments proper.

It's not unusual to want a loop that runs forever, in which case
we can use 'true' as the condition.  Some programmers favour ':'
(the null utility) for this:

CODE
while :
do
    ls -l /var/log/mail.log
    sleep 1
done
/CODE

The above lists the details for the file '/var/log/mail.log', including
its size, so this can be used to monitor the file as it grows.
Used interactively, the loop can be interrupted by pressing Ctrl-C (or
whatever your 'intr' character has been set to, see 'stty -a').

CODE
while :
    while test -f /var/run/httpd.pid
    do
        sleep 1
    done
    apachectl restart
    until test -f /var/run/httpd.pid
    do
        sleep 1
    done
done
/CODE

[looping-ii material]

We can use 'while' to loop over the lines of input from stdin by
using the 'read' utility.  An ersatz replacement for 'cat' is:

CODE
while read a
do
    echo "$a"
done
/CODE

There are several problems with this loop.  The first has
nothing to with 'while' or 'read': we
should use 'printf' not 'echo' to output the contents of '$a'
exactly.  The second is that 'read' will treat a backslash, '\',
on the end of an input line as indicating that the following
line should be read as well.  Use the '-r' option ('r' for
'raw') to make 'read' read exactly the next line of input.  Try
and get in the habit of using 'read -r' routinely.

CODE
while read -r a
do
    printf '%s\n' "$a"
done
/CODE

There is still a bug, but an obscure one.  If the final line of
input has no terminating newline, then 'read' will re @@


section for

A 'for' statement is a loop where the body is executed once for
each item in a list.  The list has a finite number of items.

The general structure is:

CODE
for v in list ...
do
    something with $v
    and something else
done
/CODE

For each item in the list, the variable, 'v' in this case, is
assigned the item and the body of the loop, the commands between
'do' and 'done' are executed.  Like the 'while' loop, 'break'
and 'continue' can be used to exit the loop early ('break') and
abandon the current cycle and start the next one ('continue').

'v' can be modifed in the body of the loop, but it has no effect
on the loop execution:

CODE
for v in a b c
do
    echo $v
    v=thing
    echo $v
done
/CODE

The list can be the result of the usual shell subsitutions,
parameter expansion or globbing are common but the others, command
substitution and tilde expansion can be used.

Here's the kind of script that your lawyers might be glad that
you had:

CODE
for f in *.c
do
    grep Copyright "$f" > /dev/null ||
      echo "file '$f' does not contain a Copyright notice"
done
/CODE

Note that when parameters are used, they are subject to field
splitting, unless quotes are used:

CODE
s='keep it simple, stupid'
for f in $s
do
    printf '%s\n' $f
done
/CODE

[move to chapter-looping-ii]
section compound commands

'while' and 'for' are compound commands (as are 'if' and 'case',
and what I say here applies to those commands as well, but it's
just more unusual to see them used in the same way).

For reasons that are obscure to me variable assignments cannot
be used at the beginning of a 'for' loop, and redirections have
to appear at the end.  So the simple command
'PATH=$(getconf PATH) env ls' (not so simple, but if you've been
following up to now then you should be able to work out what it does)
is legal, but 'PATH=/usr/bin for v in foo bar baz; do : ; done'
is not.

Redirections applied to loops apply to the whole loop.  And the
redirection is made only once.  This means any commands in the
loop will have their output redirected as well:

CODE
for f in *.c
do
    if test ! -f "${f%.c}.o" || test "$(find "$f" -newer "${f%.c}.o")"
    then
        cc "$f"
    fi
done 2> err
/CODE
[XX Does not clarify discussion]

Individual commands within the loop can use redirections, and
this does not affect the redirection of the loop itself.
Clever.

CODE
for d in */.
do
    (cd "$d" 2> /dev/null &&
     make)
done 2> err
/CODE


section recursion

A recursive function can also iterate, and this can be used as a
form of looping.  Consider how we might implement, in somewhat
functional style, a function to count how many times one string
appears in another.

CODE
{{ 'code-count.sh' | content | trim }}
/CODE

You can explore more of this style of programming in Chapter
XXX.


section Implicit Looping

Many Unix command have an implicit looping structure, some so
natural that we barely notice: 'mv file1 file2 file3 dir' moves
each of the files into the directory 'dir', and does so using a
loop.

More interesting is 'find'.  OF course blah blah

CODE
find . -exec command ... ';'
/CODE


If you find yourself writing a loop that builds up a list in a
parameter then you might consider using 'printf'.  'printf' has
historically been somewhat neglected by shell programmers, but
it is standard and fairly widely supported:

CODE
printf 'format' argument1 argument2 ...
/CODE

'format' controls how the subsequent arguments are formatted and printed
(to stdout).  The syntax is a homage to C's 'printf':

CODE
printf 'Hello %s\n' darling
/CODE

The '%s' interpolates the argument into the format string when
output ('%d', '%f', and many other friends are also supported, see
the spec for details).  Note also that '\n' is converted to a
newline (again, following the convention from C).

There is looping because the format (the first argument) gets
used (and printed out) as many times as is necessary to use up
all the subsequent arguments.

CODE
printf '%s\n' bash dash ksh sh
/CODE

In this case each argument gets printed on a separate line.  So this is
like the loop 'for a in bash dash ksh sh; do echo "$a"; done'.  In fact
in this case the 'printf' version is better for all sort of reasons.

Caveat: if the first argument, the format, starts with a hypen,
'-', then 'printf' may interpret it as an option.
'printf --%s--' might complain about an unknown option or
invalid option syntax.  Normally this isn't a problem, because
the format argument is supplied as a literal and so you can tell
if it starts with a hyphen or not.  In that case, or the case
where the format argument is the result of a parameter
expansion, use a leading '--' which will unambiguously signify the
end of option process (refer to chapter XXX for the optin
processing conventions).

CODE
printf -- -%s- foo bar baz
printf -- "$@"
/CODE

Note that it is uncommon to use a parameter expansion for the
format argument, mostly because you will need to control whether
it has any '%' escapes in.  'printf "$1"' does not output '$1',
it outputs '$1' if it has no '%' escapes in it.  The right way
to output a variable is 'printf %s "$var"' (note that this will
not output a trailing newline).





CODE
printf '%s:' args ...
/CODE

