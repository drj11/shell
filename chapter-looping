Loops

Looping, repetition, iteration.  Shell has 'for' loops that
iterate over a finite list, and 'while' loops that are
indefinite, a condition determines when, if ever, the loop
terminates.  There are also 'until' loops (just like 'while' but
with the condition inverted), but they seem to have been
relegated to the backwaters of shell.  I'll also show looping
with functions, and implicit looping that certain utilites perform
such as 'find' and 'printf'.

section while

A 'while' loop looks like this:
CODE
while condition
do
    stuff
done
/CODE

The loop executes in cycles where in each cycle 'condition' is
executed and if the condition is true then the commands 'stuff'
are executed.  If the condition is false then the loop
terminates.  This basic looping structure can modified by the
utilities 'break', which causes the loop to terminate whenever
it is run, and 'continue' which terminates the current cycle and
start a new cycle immediately (beginning with the test of
'condition').

The condition is just like in 'if' which we saw earlier.  It is
a command whose exit status is tested, and just like 'if' the
same true/false convention is used.  An exit status of 0 is true
and will cause the while loop to continue; an exit status of
non-zero is false and will terminate the while loop.

An 'until' loop is just like a 'while' loop except that the
sense of the condition if inverted.  The loop will repeat as
long as 'condition' is false, and terminate when 'condition' is
true.  They are rare in the wild.

Of course the condition commands are typically the same ones we
would use in an 'if'.

A classic use of 'while' is old-school option processing.

CODE
e=''
while [ $# -gt 0 ]
do
    case $1 in
        (--) shift; break;;
        (-e) e='!'; shift;;
        (-?) echo 1>&2 'invalid option'; exit 2;;
        (*) break;;
    esac
done
printf 'Hello %s%s\n' "$1" "$e"
/CODE

This loop has several exit conditions.  If there are no more
positional parameters then '$#' will be 0 and the condition
'[ $# -gt 0 ]' will fail; if the positional parameter '--' is supplied
then this indicates the end of option processing, and the remaining
positional parameters will be treated as arguments; if '-' followed
by some unknown option appears, then the program will exit with
a non-zero exit status (note, not just the loop is terminated
but the entire program); if there is any other sort of positional
parameter then that must be the end of option processing and the start
of the arguments proper.

It's not unusual to want a loop that runs forever, in which case
we can use 'true' as the condition.  Some programmers favour ':'
(the null utility) for this:

CODE
while :
do
    ls -l /var/log/mail.log
    sleep 1
done
/CODE

The above lists the details for the file '/var/log/mail.log', including
its size, so this can be used to monitor the file as it grows.
Used interactively, the loop can be interrupted by pressing Ctrl-C (or
whatever your 'intr' character has been set to, see 'stty -a').


section for

blah blah blah 'for'

section recursion

A recursive function can also iterate, and this can be used as a
form of looping.  Consider how we might implement, in somewhat
functional style, a function to count how many times one string
appears in another.

CODE
{{ 'code-count.sh' | content | trim }}
/CODE

You can explore more of this style of programming in Chapter
XXX.


section Implicit Looping

Many Unix command have an implicit looping structure, some so
natural that we barely notice: 'mv file1 file2 file3 dir' moves
each of the files into the directory 'dir', and does so using a
loop.

More interesting is 'find'.  OF course blah blah

CODE
find . -exec command ... ';'
/CODE


If you find yourself writing a loop that builds up a list in a
parameter then you might consider using 'printf'.  'printf' has
historically been somewhat neglected, but it is standard and
fairly widely supported:

CODE
printf 'format' argument1 argument2 ...
/CODE

'format' controls how the subsequent arguments are formatted and printed
(to stdout).  The syntax is a homage to C's 'printf':

CODE
printf 'Hello %s\n' darling
/CODE

The '%s' interpolates the argument into the format string when
output ('%d', '%f', and many other friends are also supported, see
the spec for details).  Note also that '\n' is converted to a
newline (again, following the convention from C).

There is looping because the format (the first argument) gets
used (and printed out) as many times as is necessary to use up
all the subsequent arguments.

CODE
printf '%s\n' bash dash ksh sh
/CODE

In this case each argument gets printed on a separate line.  So this is
like the loop 'for a in bash dash ksh sh; do echo "$a"; done'.  In fact
in this case the 'printf' version is better for all sort of reasons.




CODE
printf '%s:' args ...
/CODE

