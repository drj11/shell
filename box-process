sidebox Process

The process is a fundamental concept in Unix.  A Unix process can be
independently scheduled by the kernel, and generally has a separate
memory address space from other processes (although processes can
share read-only portions of their memory, and may arrange to share
other memory).  Modifications that a process makes to its own memory
are not generally shared with another process.  A subshell runs in
another process, so any modifications to the subshell's environment, or
shell variables, are not picked up by the parent (super-)shell.  This
can be a useful way of deliberately isolating changes.

Each process also has a separate working directory, and it can
sometimes be useful to change current working directory in a subshell,
to avoid changing the working directory of the parent shell:

CODE
( cd /etc/init.d; ./httpd start )
/CODE

It can be useful to use this in order to get a tarfile with nice neat
filenames:

CODE
( cd /tmp; tar cf /tmp/foo.tar foo )
/CODE


Exercise: In the above example with *tar*, what happens if you don't use
the *cd* and just do «tar cf /tmp/foo.tar /tmp/foo»?

Exercise: Why is that bad?

Exercise: What if you use the *cd*, but don't use the subshell?

Exercise: Why is that bad?


section forking

All Unix processes, except the first, are created by *forking*, in
which an existing process (the parent) calls the fork() system call.
This creates a *child process* which is an exact copy of the parent 
process except
in one detail, the result of calling the fork() system call (because
the child is a copy of the parent, both processes behave as if
they have just returned from the fork() system call).  Shell does not
contain any way to fork explicitly but of course the implementation
forks to run external utilities, and probably forks to run subshells.

section file descriptors

File descriptors are shared between forked processes.  All of
the file descriptors that the parent has open will still be open
in the child after a fork.

CODE
{ echo foo; dd bs=1000 seek=1 count=0; echo bar; } > foo
/CODE

