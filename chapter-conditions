Conditions

A condition is a command used in the condition of an 'if', seen
in the previous chapter.  We'll also see them used in 'while'
and 'for' loops in the next chapter. Bridging the two chapters,
I'll explore some of the more important, and perhaps
non-obvious, utilities used for conditions.

@@ move 'expr' and 'test' from previous chapter into here.

section find

'test' provides a few useful tests on files, but if you want to test
the length of a file, or a file's owner, or its age, you can't
do that using 'test'.  You can do some of these things portably
using 'find'; be warned that it can be quite awkward.

CODE
find /var/log/mail.log -size +1000000c
/CODE

This will tell you if '/var/log/mail.log' is bigger than 1,000,000
bytes or not.  It would be convenient if this used the exit status
to tell you that, but it doesn't; instead, the string
'/var/log/mail.log' will be written to
stdout when the file exceeds the size, otherwise there will be
no output.  So we need to test whether there is any output or
none at all.  We can use a command expansion and 'test' to
usefully put this into an 'if':

CODE
if test "$(find /var/log/mail.log -size +1000000c)"
then
    echo big mail.log
else
    echo nothing to worry about
fi
/CODE

It even has a certain poetic quality to it.

Recall (from earlier in this chapter), that 'test' followed by a
single argument is true when the argument is non-empty and false
when the argument is empty.  So it tests whether 'find' produced
any output or not.

'find' has many options and plenty of opportunity for use and
misuse.  In the context of testing various aspects of files,
you'll find the following options useful:

-size
-newer
-atime
-ctime
-mtime 
-group # owned by group
-user # owned by user
(and conceivably)
-links
-xdev

There is also '-type' but most of the tests can be done with
'test' more easily.

Be warned that it is the easiest thing in the world to write
something non-portable using 'find'.  The specification is weak,
and it is common for implementations of 'find' to have lots of
extensions which may or may not be compatible with each other or
with the spec.  The extensions are often very useful.

'-size' tests the size, in bytes, of a file.


'find A -newer B' outputs 'A' when 'A' is newer (modified more
recently than) 'B'.

'-atime', '-ctime', '-mtime', test a file's last time of access,
inode change time, and last modification time respectively.

'find A -mtime 1' will print out 'A' if 'A' is a file with a
modification time between 24 and 48 hours (1 day, rounded down).

The accounting system used for testing age of a file is a little
bit unusual.  As for '-size', a number *n* means exactly *n*,
*+n* means more than *n*, and *-n* means less than *n*.  But the
units that are compared are days since the file has been
modified (in the case of '-mtime', but similarly for access
time, and inode change time), completely ignoring fractional
days.

This gives reasonable meaning to '-mtime 7' (meaning modified 7
days ago) and '-mtime -7' (meaning modified in the last 7 days),
but '-mtime +7' means modified 8 days or more ago (because the
age, rounded down to a whole number of days has to be more than
7).

FN

None of these times can regarded as trustworthy.  On some systems a
file may be on a file system where access times are not recorded (a
read-only file system, or a file system where atime has been disabled
because it generates stream of writes to disk just by reading a file,
so may be undesirable). 'ctime' is often memorised as "creation time",
but 'chmod' and 'chown' and other commands will change the inode so it
may not be the creation time.  'mtime' is not a guarantee that the file
has not changed since a certain time, since some utilties, like 'touch',
'tar', and 'cp', can set it to any particular time.

'find' uses '!' to negate the test.  So

CODE
find foo ! -mtime -7
/CODE

will print 'foo' when it has not been modified in the last 7
days.

section digression

Since 'test' and shell itself also use '!' to invert the logic
test, that means that the following all have the same meaning.

CODE
test $(find foo ! -mtime -7) && echo old
test ! $(find foo -mtime -7) && echo old
! test $(find foo -mtime -7) && echo old
/CODE

Although these all have the same meaning, that's not because '!'
is in any way magical.  It is merely the case that 'find',
'test', and shell each use this token to negate a condition.
Obviously this is no coincidence, they have been designed that
way, but in principle each utility could have chosen to use
something other than '!' (which comes from C by the way).


Exercise: Can -xdev be used to implement pwd?  Very tricky
