Redirection

The usual place for the output of a command or pipeline is the terminal
(tty).  A redirection is used when you want the output to go to a file,
or one of a number of other, slightly special, places.  *stdout* is
redirected with '>':

CODE
cat chapter*.tex > book.tex
/CODE

If the file already exists then redirecting to it will empty it
(*truncate* is the typical Unix term) first; if it does not exist it
will be created.  This in itself can be a useful thing to do.  Recall
that ':' is the command that does nothing, we can use it with a redirect
to create an empty file:

CODE
: > newfile
/CODE

In some circumstances it may be undesirable to overwrite an existing
file with a redirect.  If the *noclobber* option is set, then instead
of overwriting an existing file, shell will complain:

It turns out that it's legal to use no command at all with a
redirection:

CODE
> newfile
/CODE

Of course a command's input can be redirected as well.  *stdin* is
redirected with '<':

CODE
wc < /etc/passwd
/CODE

Many commands ('wc' included) will treat a file as input if it is named as
an argument, and use *stdin* if no arguments are supplied, but this is
entirely a convention of the command, and nothing to do with *shell*
itself.  'tr' is a common command that does not use this convention, so we
have to use a redirection:

CODE
{{ 'code-tr.sh' | sh.i | trim }}
/CODE


Recall that a program can write output to both stdout and stderr.
stderr is redirected by using '2>' instead of '>'.

CODE
cc *.c 2> errors
/CODE


I find that using 'dd' often makes me want to redirect (or close)
stderr.  'dd' outputs a summary to stderr in normal operation.  In
interactive use that can be quite useful; in shell
programs it can get in the way.  Part of my 'rh' program gets 4 bytes
from the random device:

CODE
dd bs=4 count=1 < /dev/urandom
/CODE

Not only does this send 4 random bytes to my terminal (fun!), 'dd'
writes "informative" messages on stderr:

PRE
!shell!drj$ dd bs=4 count=1 < /dev/random
fwK
1+0 records in
1+0 records out
4 bytes (4 B) copied, 6.8606e-05 s, 58.3 kB/s
/PRE

(If you try this at home, you will very likely get different
random output, and different timings reported by 'dd').

In the published version of 'rh' stderr has been redirected to
/dev/null:

CODE
dd bs=4 count=1 < /dev/urandom 2> /dev/null | ... something
/CODE

Another one:

CODE
rmdir * 2> /dev/null
/CODE

Which will remove all directories, in the current directory, that are
empty (because 'rmdir' will not remove a directory unless it is
empty); any complaints from 'rmdir' about "Directory not empty" are
sent to /dev/null.


As well as redirecting stdout or stderr to files, a redirection can be
made to another file descriptor, duplicating that file descriptor
(system programmers may wish to note that this is implemented using
dup2()).



One could (and in fact, I did) write a program called 'err' that is like
'echo' but writes output to stderr instead of stdout.  It will be handy
in some of the explanations that follow.

CODE
err () { echo "$@" 1>&2 ; }
/CODE

section order

The order in which redirections appear in the command matters;
they are processed from left to right.  The simple case is one
you rarely see:

CODE
echo foo > bar > baz
/CODE

stdin is first redirected to the file 'bar' (truncating it, and
creating it if necessary), then stdin is redirected to the file
'baz', then 'echo' runs, sending its output to the file 'baz'.

Consider the difference between

CODE
some-command > foo 2>&1
/CODE

and

CODE
some-command 2>&1 > foo
/CODE

The first version redirects stdout to the file 'foo' and then
redirects stderr to the same place.  Any output for both stdout
and stderr will end up in the same place, the file 'foo'.  In
the second version, stderr is redirected to stdout and then
stdout is redirected to the file 'foo'.  When some-command
writes to stderr it will appear on the stdout that was in effect
before any of the redirections.  stdout will appear in the file
'foo'.

In a pipeline the pipes are setup before the redirections of any
of the component commands.  So to redirect both stdout and
stderr through a pipe, the following works:

CODE
cc *.c 2>&1 | tee log
/CODE

'tee' is a utility that copies its stdin to both its stdout and
to any files specifies as arguments.  So this command saves both
the stdout and stderr of 'cc *.c' in the file 'log' as well as
displaying them.


section stty

File descriptors are all the same, they are not divided into
input file descriptors and output file descriptors.  It is
merely a convention of Unix that file descriptor 0 (stdin) is
used for input and file descriptors 1 and 2 (stdout and stderr)
are used for output.  It is legal to send output to stdin:

CODE
echo >&0 hello stdin
</CODE

If you try this interactively then you'll see the output on your
terminal just like normal.  No surprises.  We can tell that
something funny is going on if we redirect stdout.  In this
example I've put the echo inside a function to make it easier to
see the different redirections:

CODE
$ win () { echo >&0 "$@" ; }
$ win foo > /dev/null
foo
/CODE

We still see the output on the terminal, even though stdout has
been redirected to '/dev/null'.  That's because 'win' sends its
ouput to stdin, and stdin is attached to your terminal.

This example is a bit silly, but there are times when this kind
of thing can be useful.

XX CAN'T USE EXAMPLE IN THIS CHAPTER BECAUSE IT USES COMMAND
SUBSTITUTION XX

'stty size' reports the numbers of rows and columns of the
terminal.  Let's write a program that displays the first page of
its input.

CODE
{{ 'code-1page.sh' | content }}
/CODE

This looks reasonable, but it doesn't work.  Typically we will
use this with a redirect: '1Page < /etc/passwd'.  'stty' reports
on the terminal attached to stdin, and stdin has been redirected
to be '/etc/passwd/'.  'stty' complains.  We can use a
redirection to attach stdin to a terminal when we run 'stty'.
We can't use stdout because 'stty' is run inside a command
substitution (so its stdout is piped into shell).  We use
stderr:

CODE
{{ 'code-1page-fix.sh | content }}
/CODE

Exercise: Why does 'stty' report on the terminal attached to
stdin instead of, say, stdout?


section exercises


Exercise: The lexical rules are a bit obscure; what is the difference
between the following two commands?

CODE
echo 1 2 > /dev/null
echo 1 2> /dev/null
/CODE

Exercise: Why is it a bad idea to type either of the following?

CODE
exec <&-
exec >&-
/CODE

Exercise: Your friendly local shell programming mentor has typed
'exec >&-' at your prompt while you were making tea.  How do you
recover without closing the window?
