Redirection

The usual place for the output of a command or pipeline is the terminal
(tty).  A redirection is used when you want the output to go to a file,
or one of a number of other, slightly special, places.

CODE
cat chapter*.tex > book.tex
/CODE

Recall that a program can write output to both stdout and stderr.
stderr is redirected by using '2>' instead of '>'.

CODE
cc *.c 2> errors
/CODE

If the file already exists then redirecting to it will empty it
(*truncate* is the typical Unix term) first; if it does not exist it
will be created.  This in itself can be a useful thing to do.  Recall
that ':' is the command that does nothing, we can use it with a redirect
to create an empty file:

CODE
: > newfile
/CODE

In some circumstances it may be undesirable to overwrite an existing
file with a redirect.  If the *noclobber* option is set, then instead
of overwriting an existing file, shell will complain:


It turns out that it's legal to use no command at all with a
redirection:

CODE
> newfile
/CODE



I find that using 'dd' often makes me want to redirect (or close)
stderr.  'dd' outputs a summary to stderr in normal operation.  In
interactive use that can be quite useful; in shell
programs it can get in the way.  Part of my 'rh' program gets 4 bytes
from the random device:

CODE
dd bs=4 count=1 < /dev/urandom
/CODE

Not only does this send 4 random bytes to my terminal (fun!), 'dd'
writes "informative" messages on stderr:

PRE
!shell!drj$ dd bs=4 count=1 < /dev/random
fwK
1+0 records in
1+0 records out
4 bytes (4 B) copied, 6.8606e-05 s, 58.3 kB/s
/PRE

(If you try this at home, you will very likely get different
random output, and different timings reported by 'dd').

In the published version of 'rh' stderr has been redirected to
/dev/null:

CODE
dd bs=4 count=1 < /dev/urandom 2> /dev/null | ... something
/CODE

Another one:

CODE
rmdir * 2> /dev/null
/CODE

Which will remove all directories, in the current directory, that are
empty; any complaints from 'rmdir' about "Directory not empty" are
sent to /dev/null.


As well as redirecting stdout or stderr to files, a redirection can be
made to another file descriptor, duplicating that file descriptor
(system programmers may wish to note that this is implemented using
dup2()).



One could (and in fact, I did) write a program called 'err' that is like
'echo' but writes output to stderr instead of stdout.  It will be handy
in some of the explanations that follow.

CODE
err () { echo "$@" 1>&2 ; }
/CODE




Exercise: The lexical rules are a bit obscure; what is the difference
between the following two commands?

CODE
echo 1 2 > /dev/null
echo 1 2> /dev/null
/CODE

Exercise: Why is it a bad idea to type either of the following?

CODE
exec <&-
exec >&-
/CODE

Exercise: Your friendly local shell programming mentor has typed
'exec >&-' at your prompt while you were making tea.  How do you
recover without closing the window?
