#
# unod
# Is better as a bash script because then the printf \x escapes
# work (which is a non-POSIX extension in bash).
# Reverse 'od', producing a binary file from text input.

while read -r a
do
    set -- $a
    if [ ${#1} -gt 3 ]
    then
        # Assume first word is an address; which we ignore.
        shift
    fi
    for w
    do
        case ${#w} in
            2) printf '\x'"$w";;
            3) printf '\'"$w";;
            *) echo 'unknown word' 1>&2;;
        esac
    done
done
