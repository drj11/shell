(Possibly the first chapter?)

If you've been using Unix for a little while, you've probably come
across the command line.  When you use the command line, you're
interacting with a program called *the shell*, or sometimes just
*shell*.  *shell* is a programming language, and the commands you type
at the command line are programs in *shell*.  Usually very simple ones.

Here is a program that writes a traditional greeting to the output:

CODE
echo Hello, world!
/CODE

*Shell* is called shell because it is the outer layer of a
system that can be thought of as having a nut-like structure.
The core of the system is referred to as the *kernel* and
has privileged access to system hardware and resources; it
provides a controlled interface to the system hadware and
mediates between programs.  *shell*, being outermost, is the
component with which the user interacts; the analogy is somewhat
anachronistic these days, most users will use a graphical user
interface, although *shell* can still be considered outermost in
the sense that the user can choose to operate the system using
*shell* as the user interface.

In other parts of computing, *shell* has a fairly generic
meaning of user interface (usually a command line interface, but
"graphical shell" is also used).  In the context of Unix *shell*
almost always means the standard system command line shell and
that is the sense in which I use it throughout this work.

There is more than one *shell*, and they don't all implement the same
programming language.  In this book I mostly refer to any shell that
implements the Single Unix Specification Shell Command Language.  The
GNU project's Bash and AT&T's KornShell both implement this
specification (more or less) and it's been pretty hard to find a version
of Unix that doesn't ship either one of those shells or another equally
good shell as /bin/sh since about the year 2000.  There are some minor
deviations.  Bash is common enough to be important, but there are some
ways in which it is not SUS compliant; I'll mention those as they come
up.  Many Unix systems supply utilities that are not part of SUS, or
they implement extra features that are not specified; where practical I
avoid these, but when they implement features that are not covered in
SUS then I'll use them, and note that they're not standard.
@@ shrink and move to sidebox? @@

In the first little example above, 'echo' is the name of a *command*,
and the remainder of the line form the *arguments* to that command.
'echo' is a command that writes its arguments to its output.

There is a default place that commands write output to, it is called
*standard output*.  I shall call it *stdout* for short, and to
emphasise that it has a technical meaning.  If you are logged
into your Unix system and are running commands "on the command
line" then stdout is your terminal, where you can see the output
(these days, a terminal is likely to be a graphical program with
a window that emulates a historic terminal).

Although 'echo' is a pretty simple command, it sees a lot of use in
shell programs.  It's used for sending messages to the user's
terminal, both routine and exceptional, for creating
(usually small) files, and for generating strings to send to
other programs.  All of these uses appear in this book.

An even simpler command is ':', the null utility:

CODE
: Hello, world!
/CODE

If you tried this example, you'd see that it did nothing.  This command
is surprisingly useful, and is well worth remembering.  It definitely
features later.

Programming is about combining simple parts to form large programs.
Shell has several ways to combine parts, but the *pipe* provides
shell programs with a lot of their character.

CODE
ls /usr/bin | head
/CODE

This is two *simple commands* connected by a *pipe* to form a
*pipeline*.  Shell arranges that the stdout of 'ls /usr/bin' is
connected to the input of 'head'.  Like stdout for output, all commands
have a default place for input, this is *standard input*, and I shall
call it *stdin*.  'head' reads lines from *stdin* and copies them to its
output, stopping after it has copied 10 lines.  Thus this pipeline shows
the first 10 files in '/usr/bin' (which has way more than 10 files in it
on my system, and probably yours).

It's worth noting that all commands have a *stdin* even if they don't
make use of it.  For example, we can pointlessly pipe input into 'echo':

CODE
ls /usr/bin | echo ignored
/CODE

That is a pipeline that writes a list of the files in '/usr/bin' to the
command 'echo ignored' which ignores its input and writes out 'ignored'
to *stdout*.  Following the great Unix tradition of not preventing you
from doing something that is silly or stupid, it is not an error of any
sort to send output to a command that ignores its input.

Pipelines can have as many simple commands piped together as you
like, the output from each command is piped into the next
command in the pipeline.

'tail' is a command similar to 'head', in that in copies lines
from its *stdin* to its *stdout*, but it copies the last *n*
lines, where *n* is the number that follows the '-n' argument:

CODE
ls /usr/bin | head | tail -n 2
/CODE

The above example, will list files 9 and 10 from the original
list of /usr/bin (the last two lines of the first 10).
