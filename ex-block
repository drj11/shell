Answer for Exercise 27db90d3

The strategy will be to create an output stream where we can tell, by
inspecting the contents of the stream, where we are in the stream.  A
series of fixed sized records with each record having a sequential count
should be okay.

CODE
{{ d['code-manylines-all.sh|idio|t'].def }}
/CODE

Each line is 8 bytes long and each line contains a 4 digit number.  We
output 10000 lines which is 80000 bytes.

Now we use this in a pipeline:

CODE
{{ d['code-manylines-all.sh|idio|t'].run }}
/CODE

We already know that the first 'head' will consume some of the input
(hopefully not all!); the output from the second 'head' will tell us
how much input the first 'head' consumed.  Our lines are 8 bytes long,
which we guess will divide into whatever block size 'head' uses; if
it does not divide, the first line output will be truncated,
but the second one will be complete (which is why we use 'head -2').

On my Linux laptop this gives the output:

PRE
{{ d['code-manylines-pipe.sh|shint'] }}
/PRE

Indicating the first 'head' consumed exactly 1024 lines, which is 8192
bytes (2**12): A very traditional block size.

The first version of this program did not use 'dd' and computed the
wrong answer; indeed it produces different answers when run more than
once:

PRE
{{ d['code-manylines.sh|shtmp'].transcript }}
/PRE

Why is that? It's because the 'manylines' program produces output
into the pipe fairly slowly, and when 'head' reads the contents
of the pipe, my Linux kernel returns a partial block, so 'head'
will read only as much data as 'manylines' has written into the pipe
at the point that 'head' made the system call.

Exercise: Why does 'dd' help?

Exercise: Compare the above implementation of manylines with this one:

CODE
manylines () {
  while : ; do echo ''; done |
  head -9999 |
  nl -ba |
  while read a; do
    printf "%07d\n" "$a"
  done
}
/CODE

Which is better?

Exercise: Can you think of another way to write manylines? Is it better?
